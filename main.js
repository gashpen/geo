(()=>{var e,r,n,t,o,i,a,c={91:(e,r,n)=>{"use strict";n(177),n(562),n.p,n.p,n.p},562:()=>{const e=document.querySelector(".footer_form"),r=document.querySelector(".form_popup"),n=document.querySelector(".chat_view_window"),t=document.querySelector(".alert_popup");e.addEventListener("submit",(e=>{const o=[];o.push(e.target.enter.value),navigator.geolocation.getCurrentPosition((e=>{const{latitude:r,longitude:t}=e.coords;e&&o.forEach((e=>{n.innerHTML+=`\n              <div class="test_box message my_message">\n                <span>${e}</span>\n                <div class="location">[${r}, ${t}]</div>\n              </div>\n            `}))}),(()=>{t.classList.remove("d-none"),o.forEach((o=>{r.addEventListener("submit",(e=>{e.preventDefault(),n.innerHTML+=`\n        <div class="message_wrap">\n          <span>${o}</span>\n          <div class="location">[${e.target.popup.value}]</div>\n        </div>\n        `,t.classList.add("d-none")})),t.addEventListener("click",(n=>{"material-symbols-outlined"!==n.target.classList[1]&&"btn_close"!==e.target.classList.value||t.classList.add("d-none"),"btn_ok"===e.target.classList.value&&r.submit()}))}))})),e.preventDefault(),e.target.enter.value=""}))},783:(e,r,n)=>{"use strict";var t=n(618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function d(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function s(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),c;var n,u,p=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var n=document.getElementsByTagName("script"),i=n[n.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var n=r.split(/([^\\/]+)\.js$/),o=n&&n[1];return o&&e?e.split(",").map((function(e){var n=new RegExp("".concat(o,"\\.js$"),"g");return t(r.replace(n,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return n=function(){var e=p(r.filename),n=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),n=!1;return a.call(r,(function(r){if(r.href){var o=function(e,r){var n;return e=t(e,{stripWWW:!1}),r.some((function(t){e.indexOf(r)>-1&&(n=t)})),n}(r.href,e);l(o)&&!0!==r.visited&&o&&(d(r,o),n=!0)}})),n}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,r=arguments;clearTimeout(u),u=setTimeout((function(){return n.apply(e,r)}),50)}}},618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(r,"i"),"").split("/"),t=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",r+t+n.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},177:(e,r,n)=>{"use strict";var t=n(783)(e.id,{locals:!1});e.hot.dispose(t),e.hot.accept(void 0,t)}},d={};function s(e){var r=d[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var n=d[e]={id:e,exports:{}};try{var t={id:e,module:n,factory:c[e],require:s};s.i.forEach((function(e){e(t)})),n=t.module,t.factory.call(n.exports,n,n.exports,t.require)}catch(e){throw n.error=e,e}return n.exports}s.m=c,s.c=d,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"f9a98c4c4c9c67782b4a",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ajs:",s.l=(n,t,o,i)=>{if(e[n])e[n].push(t);else{var a,c;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==r+o){a=u;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",r+o),a.src=n),e[n]=[t];var p=(r,t)=>{a.onerror=a.onload=null,clearTimeout(f);var o=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(t))),r)return r(t)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),c&&document.head.appendChild(a)}},(()=>{var e,r,n,t={},o=s.c,i=[],a=[],c="idle",d=0,l=[];function u(e){c=e;for(var r=[],n=0;n<a.length;n++)r[n]=a[n].call(null,e);return Promise.all(r)}function p(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var r=0;r<e.length;r++)e[r]()}}))}function f(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return u("check").then(s.hmrM).then((function(n){return n?u("prepare").then((function(){var t=[];return r=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](n.c,n.r,n.m,e,r,t),e}),[])).then((function(){return r=function(){return e?v(e):u("ready").then((function(){return t}))},0===d?r():new Promise((function(e){l.push((function(){e(r())}))}));var r}))})):u(m()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+c+")")})):v(e)}function v(e){e=e||{},m();var t=r.map((function(r){return r(e)}));r=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var a,c=u("apply"),d=function(e){a||(a=e)},s=[];return t.forEach((function(e){if(e.apply){var r=e.apply(d);if(r)for(var n=0;n<r.length;n++)s.push(r[n])}})),Promise.all([i,c]).then((function(){return a?u("fail").then((function(){throw a})):n?v(e).then((function(e){return s.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):u("idle").then((function(){return s}))}))}function m(){if(n)return r||(r=[]),Object.keys(s.hmrI).forEach((function(e){n.forEach((function(n){s.hmrI[e](n,r)}))})),n=void 0,!0}s.hmrD=t,s.i.push((function(l){var v,m,g,y,E=l.module,b=function(r,n){var t=o[n];if(!t)return r;var a=function(a){if(t.hot.active){if(o[a]){var c=o[a].parents;-1===c.indexOf(n)&&c.push(n)}else i=[n],e=a;-1===t.children.indexOf(a)&&t.children.push(a)}else console.warn("[HMR] unexpected require("+a+") from disposed module "+n),i=[];return r(a)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(n){r[e]=n}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(a,l,s(l));return a.e=function(e){return function(e){switch(c){case"ready":u("prepare");case"prepare":return d++,e.then(p,p),e;default:return e}}(r.e(e))},a}(l.require,l.id);E.hot=(v=l.id,m=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==v,_requireSelf:function(){i=m.parents.slice(),e=g?void 0:v,s(v)},active:!0,accept:function(e,r,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._acceptedDependencies[e[t]]=r||function(){},y._acceptedErrorHandlers[e[t]]=n;else y._acceptedDependencies[e]=r||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":r=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,r)})),u("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:f,apply:h,status:function(e){if(!e)return c;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var r=a.indexOf(e);r>=0&&a.splice(r,1)},data:t[v]},e=void 0,y),E.parents=i,E.children=[],i=[],l.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");if(n.length)for(var t=n.length-1;t>-1&&!e;)e=n[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),n=(e,r,n,t)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)n();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||r,d=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=a,d.request=c,o.parentNode.removeChild(o),t(d)}},o.href=r,document.head.appendChild(o),o},t=(e,r)=>{for(var n=document.getElementsByTagName("link"),t=0;t<n.length;t++){var o=(a=n[t]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===r))return a}var i=document.getElementsByTagName("style");for(t=0;t<i.length;t++){var a;if((o=(a=i[t]).getAttribute("data-href"))===e||o===r)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,r,c,d,l,u)=>{l.push(a),e.forEach((e=>{var r=s.miniCssF(e),a=s.p+r,c=t(r,a);c&&d.push(new Promise(((r,t)=>{var d=n(e,a,(()=>{d.as="style",d.rel="preload",r()}),t);o.push(c),i.push(d)})))}))},(()=>{var e,r,n,t,o,i=s.hmrS_jsonp=s.hmrS_jsonp||{179:0},a={};function c(r,n){return e=n,new Promise(((e,n)=>{a[r]=e;var t=s.p+s.hu(r),o=new Error;s.l(t,(e=>{if(a[r]){a[r]=void 0;var t=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+r+" failed.\n("+t+": "+i+")",o.name="ChunkLoadError",o.type=t,o.request=i,n(o)}}))}))}function d(e){function a(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var o=t.pop(),i=o.id,a=o.chain,d=s.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],p=s.c[u];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===r.indexOf(u)&&(p.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),c(n[u],[i])):(delete n[u],r.push(u),t.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function c(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}s.f&&delete s.f.jsonpHmr,r=void 0;var d={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in n)if(s.o(n,f)){var h,v=n[f],m=!1,g=!1,y=!1,E="";switch((h=v?a(f):{type:"disposed",moduleId:f}).chain&&(E="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(h),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(g)for(f in u[f]=v,c(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,f)&&(d[f]||(d[f]=[]),c(d[f],h.outdatedDependencies[f]));y&&(c(l,[h.moduleId]),u[f]=p)}n=void 0;for(var b,w=[],_=0;_<l.length;_++){var D=l[_],I=s.c[D];I&&(I.hot._selfAccepted||I.hot._main)&&u[D]!==p&&!I.hot._selfInvalidated&&w.push({module:D,require:I.hot._requireSelf,errorHandler:I.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var r,n=l.slice();n.length>0;){var o=n.pop(),a=s.c[o];if(a){var c={},u=a.hot._disposeHandlers;for(_=0;_<u.length;_++)u[_].call(null,c);for(s.hmrD[o]=c,a.hot.active=!1,delete s.c[o],delete d[o],_=0;_<a.children.length;_++){var p=s.c[a.children[_]];p&&(e=p.parents.indexOf(o))>=0&&p.parents.splice(e,1)}}}for(var f in d)if(s.o(d,f)&&(a=s.c[f]))for(b=d[f],_=0;_<b.length;_++)r=b[_],(e=a.children.indexOf(r))>=0&&a.children.splice(e,1)},apply:function(r){for(var n in u)s.o(u,n)&&(s.m[n]=u[n]);for(var t=0;t<o.length;t++)o[t](s);for(var i in d)if(s.o(d,i)){var a=s.c[i];if(a){b=d[i];for(var c=[],p=[],f=[],h=0;h<b.length;h++){var v=b[h],m=a.hot._acceptedDependencies[v],g=a.hot._acceptedErrorHandlers[v];if(m){if(-1!==c.indexOf(m))continue;c.push(m),p.push(g),f.push(v)}}for(var y=0;y<c.length;y++)try{c[y].call(null,b)}catch(n){if("function"==typeof p[y])try{p[y](n,{moduleId:i,dependencyId:f[y]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[y],error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[y],error:n}),e.ignoreErrored||r(n)}}}for(var E=0;E<w.length;E++){var _=w[E],D=_.module;try{_.require(D)}catch(n){if("function"==typeof _.errorHandler)try{_.errorHandler(n,{moduleId:D,module:s.c[D]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:D,error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:D,error:n}),e.ignoreErrored||r(n)}}return l}}}self.webpackHotUpdateajs=(r,t,i)=>{for(var c in t)s.o(t,c)&&(n[c]=t[c],e&&e.push(c));i&&o.push(i),a[r]&&(a[r](),a[r]=void 0)},s.hmrI.jsonp=function(e,r){n||(n={},o=[],t=[],r.push(d)),s.o(n,e)||(n[e]=s.m[e])},s.hmrC.jsonp=function(e,a,l,u,p,f){p.push(d),r={},t=a,n=l.reduce((function(e,r){return e[r]=!1,e}),{}),o=[],e.forEach((function(e){s.o(i,e)&&void 0!==i[e]?(u.push(c(e,f)),r[e]=!0):r[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,n){r&&s.o(r,e)&&!r[e]&&(n.push(c(e)),r[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(91)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VStHLEdBRXpCWixFQUFvQm9CLEVBQUVzSSxFQUFpQjlJLFNBQ1ZkLElBQTdCNEosRUFBZ0I5SSxJQUVoQnlELEVBQVNuTCxLQUFLMlEsRUFBZ0JqSixFQUFTdUksSUFDdkNHLEVBQW9CMUksSUFBVyxHQUUvQjBJLEVBQW9CMUksSUFBVyxDQUVqQyxJQUNJWixFQUFvQjJLLElBQ3ZCM0ssRUFBb0IySyxFQUFFQyxTQUFXLFNBQVVoSyxFQUFTeUQsR0FFbERpRixHQUNBdEosRUFBb0JvQixFQUFFa0ksRUFBcUIxSSxLQUMxQzBJLEVBQW9CMUksS0FFckJ5RCxFQUFTbkwsS0FBSzJRLEVBQWdCakosSUFDOUIwSSxFQUFvQjFJLElBQVcsRUFFakMsRUFFRixFQUVBWixFQUFvQmdFLEtBQU8sS0FDMUIsR0FBcUIsb0JBQVY4SSxNQUF1QixNQUFNLElBQUkvSSxNQUFNLHNDQUNsRCxPQUFPK0ksTUFBTTlNLEVBQW9CaUksRUFBSWpJLEVBQW9CZSxRQUFRNEMsTUFBTW9KLElBQ3RFLEdBQXVCLE1BQXBCQSxFQUFTcEYsT0FBWixDQUNBLElBQUlvRixFQUFTQyxHQUFJLE1BQU0sSUFBSWpKLE1BQU0sbUNBQXFDZ0osRUFBU0UsWUFDL0UsT0FBT0YsRUFBU0csTUFGa0IsQ0FFWixHQUNyQixDLEtDdGZ1QmxOLEVBQW9CLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL25vcm1hbGl6ZS11cmwuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2Nzcy9zdHlsZS5jc3M/NmI3YiIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJhanM6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJ2YXIgY3JlYXRlU3R5bGVzaGVldCA9IChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gKG9wdGlvbnMpID0+IHtcblx0cmV0dXJuIHsgZGlzcG9zZTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgb2xkVGFnID0gb2xkVGFnc1tpXTtcblx0XHRcdGlmKG9sZFRhZy5wYXJlbnROb2RlKSBvbGRUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRUYWcpO1xuXHRcdH1cblx0XHRvbGRUYWdzLmxlbmd0aCA9IDA7XG5cdH0sIGFwcGx5OiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IChjaHVua0lkcywgcmVtb3ZlZENodW5rcywgcmVtb3ZlZE1vZHVsZXMsIHByb21pc2VzLCBhcHBseUhhbmRsZXJzLCB1cGRhdGVkTW9kdWxlc0xpc3QpID0+IHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGNodW5rSWRzLmZvckVhY2goKGNodW5rSWQpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHR2YXIgb2xkVGFnID0gZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpO1xuXHRcdGlmKCFvbGRUYWcpIHJldHVybjtcblx0XHRwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciB0YWcgPSBjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCAoKSA9PiB7XG5cdFx0XHRcdHRhZy5hcyA9IFwic3R5bGVcIjtcblx0XHRcdFx0dGFnLnJlbCA9IFwicHJlbG9hZFwiO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9LCByZWplY3QpO1xuXHRcdFx0b2xkVGFncy5wdXNoKG9sZFRhZyk7XG5cdFx0XHRuZXdUYWdzLnB1c2godGFnKTtcblx0XHR9KSk7XG5cdH0pO1xufSIsImNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9vdGVyX2Zvcm0nKTtcbmNvbnN0IGZvcm1Qb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX3BvcHVwJyk7XG5jb25zdCBvdXRwdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhdF92aWV3X3dpbmRvdycpO1xuY29uc3QgcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWxlcnRfcG9wdXAnKTtcblxuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgYXJyLnB1c2goZS50YXJnZXQuZW50ZXIudmFsdWUpO1xuICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBsYXRpdHVkZSwgbG9uZ2l0dWRlIH0gPSBkYXRhLmNvb3JkcztcbiAgICBpZiAoZGF0YSkge1xuICAgICAgYXJyLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBgXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXN0X2JveCBtZXNzYWdlIG15X21lc3NhZ2VcIj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ke2VsZW19PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2NhdGlvblwiPlske2xhdGl0dWRlfSwgJHtsb25naXR1ZGV9XTwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGA7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sICgpID0+IHtcbiAgICBwb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcbiAgICBhcnIuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgZm9ybVBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZV93cmFwXCI+XG4gICAgICAgICAgPHNwYW4+JHtlbGVtfTwvc3Bhbj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9jYXRpb25cIj5bJHtldnQudGFyZ2V0LnBvcHVwLnZhbHVlfV08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgICAgIHBvcHVwLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xuICAgICAgfSk7XG4gICAgICBwb3B1cC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdFsxXSA9PT0gJ21hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQnXG4gICAgICAgICAgICAgIHx8IGUudGFyZ2V0LmNsYXNzTGlzdC52YWx1ZSA9PT0gJ2J0bl9jbG9zZScpIHtcbiAgICAgICAgICBwb3B1cC5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LnZhbHVlID09PSAnYnRuX29rJykge1xuICAgICAgICAgIGZvcm1Qb3B1cC5zdWJtaXQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgZS50YXJnZXQuZW50ZXIudmFsdWUgPSAnJztcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKlxuICBlc2xpbnQtZGlzYWJsZVxuICBuby1jb25zb2xlLFxuICBmdW5jLW5hbWVzXG4qL1xudmFyIG5vcm1hbGl6ZVVybCA9IHJlcXVpcmUoJy4vbm9ybWFsaXplLXVybCcpO1xuXG52YXIgc3JjQnlNb2R1bGVJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG52YXIgbm9Eb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCc7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCkge1xuICB2YXIgc3JjID0gc3JjQnlNb2R1bGVJZFttb2R1bGVJZF07XG5cbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChsYXN0U2NyaXB0VGFnKSB7XG4gICAgICAgIHNyYyA9IGxhc3RTY3JpcHRUYWcuc3JjO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlTWFwKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcblxuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoJy5qcycsICcuY3NzJyldO1xuICAgIH1cblxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGVNYXAuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCAnZycpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWwsIHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICAgIHVybCA9IGVsLmhyZWYuc3BsaXQoJz8nKVswXTtcbiAgfVxuXG4gIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWwuaXNMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgLy8gV2Ugc2VlbSB0byBiZSBhYm91dCB0byByZXBsYWNlIGEgY3NzIGxpbmsgdGhhdCBoYXNuJ3QgbG9hZGVkIHlldC5cbiAgICAvLyBXZSdyZSBwcm9iYWJseSBjaGFuZ2luZyB0aGUgc2FtZSBmaWxlIG1vcmUgdGhhbiBvbmNlLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghdXJsIHx8ICEodXJsLmluZGV4T2YoJy5jc3MnKSA+IC0xKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIGVsLnZpc2l0ZWQgPSB0cnVlO1xuICB2YXIgbmV3RWwgPSBlbC5jbG9uZU5vZGUoKTtcbiAgbmV3RWwuaXNMb2FkZWQgPSBmYWxzZTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5ocmVmID0gXCJcIi5jb25jYXQodXJsLCBcIj9cIikuY29uY2F0KERhdGUubm93KCkpO1xuXG4gIGlmIChlbC5uZXh0U2libGluZykge1xuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdFbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsb2FkVXJsKGhyZWYsIHNyYykge1xuICB2YXIgcmV0OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuICBocmVmID0gbm9ybWFsaXplVXJsKGhyZWYsIHtcbiAgICBzdHJpcFdXVzogZmFsc2VcbiAgfSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cblxuICBzcmMuc29tZShmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihzcmMpID4gLTEpIHtcbiAgICAgIHJldCA9IHVybDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiByZWxvYWRTdHlsZShzcmMpIHtcbiAgaWYgKCFzcmMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIHZhciBsb2FkZWQgPSBmYWxzZTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdXJsID0gZ2V0UmVsb2FkVXJsKGVsLmhyZWYsIHNyYyk7XG5cbiAgICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cGRhdGVDc3MoZWwsIHVybCk7XG4gICAgICBsb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZEFsbCgpIHtcbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlQ3NzKGVsKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVXJsUmVxdWVzdCh1cmwpIHtcbiAgLy8gQW4gVVJMIGlzIG5vdCBhbiByZXF1ZXN0IGlmXG4gIC8vIEl0IGlzIG5vdCBodHRwIG9yIGh0dHBzXG4gIGlmICghL15odHRwcz86L2kudGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIGlmIChub0RvY3VtZW50KSB7XG4gICAgY29uc29sZS5sb2coJ25vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTUycpO1xuICAgIHJldHVybiBub29wO1xuICB9XG5cbiAgdmFyIGdldFNjcmlwdFNyYyA9IGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgc3JjID0gZ2V0U2NyaXB0U3JjKG9wdGlvbnMuZmlsZW5hbWUpO1xuICAgIHZhciByZWxvYWRlZCA9IHJlbG9hZFN0eWxlKHNyYyk7XG5cbiAgICBpZiAob3B0aW9ucy5sb2NhbHMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBEZXRlY3RlZCBsb2NhbCBjc3MgbW9kdWxlcy4gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZWxvYWRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIGNzcyByZWxvYWQgJXMnLCBzcmMuam9pbignICcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIFJlbG9hZCBhbGwgY3NzJyk7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVib3VuY2UodXBkYXRlLCA1MCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVXJsKHBhdGhDb21wb25lbnRzKSB7XG4gIHJldHVybiBwYXRoQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBpdGVtKSB7XG4gICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICBjYXNlICcuLic6XG4gICAgICAgIGFjY3VtdWxhdG9yLnBvcCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnLic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwgW10pLmpvaW4oJy8nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsU3RyaW5nKSB7XG4gIHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG5cbiAgaWYgKC9eZGF0YTovaS50ZXN0KHVybFN0cmluZykpIHtcbiAgICByZXR1cm4gdXJsU3RyaW5nO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdXJsU3RyaW5nLmluZGV4T2YoJy8vJykgIT09IC0xID8gdXJsU3RyaW5nLnNwbGl0KCcvLycpWzBdICsgJy8vJyA6ICcnO1xuICB2YXIgY29tcG9uZW50cyA9IHVybFN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAocHJvdG9jb2wsICdpJyksICcnKS5zcGxpdCgnLycpO1xuICB2YXIgaG9zdCA9IGNvbXBvbmVudHNbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLywgJycpO1xuICBjb21wb25lbnRzWzBdID0gJyc7XG4gIHZhciBwYXRoID0gbm9ybWFsaXplVXJsKGNvbXBvbmVudHMpO1xuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aDtcbn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcwNTQxODI3NTMzNFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvaG9tZS9hcHB2ZXlvci9wcm9qZWN0cy9nZW8tMnU3Y2wvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdGlmIChjYWNoZWRNb2R1bGUuZXJyb3IgIT09IHVuZGVmaW5lZCkgdGhyb3cgY2FjaGVkTW9kdWxlLmVycm9yO1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHR0cnkge1xuXHRcdHZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0XHRtb2R1bGUgPSBleGVjT3B0aW9ucy5tb2R1bGU7XG5cdFx0ZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTtcblx0fSBjYXRjaChlKSB7XG5cdFx0bW9kdWxlLmVycm9yID0gZTtcblx0XHR0aHJvdyBlO1xuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5odSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgXCJtYWluXCIgKyBcIi5jc3NcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gKFwibWFpbi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCIpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcImY5YTk4YzRjNGM5YzY3NzgyYjRhXCIpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzID0gMDtcbnZhciBibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdHZhciBtb2R1bGUgPSBvcHRpb25zLm1vZHVsZTtcblx0dmFyIHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKG9wdGlvbnMucmVxdWlyZSwgb3B0aW9ucy5pZCk7XG5cdG1vZHVsZS5ob3QgPSBjcmVhdGVNb2R1bGVIb3RPYmplY3Qob3B0aW9ucy5pZCwgbW9kdWxlKTtcblx0bW9kdWxlLnBhcmVudHMgPSBjdXJyZW50UGFyZW50cztcblx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdG9wdGlvbnMucmVxdWlyZSA9IHJlcXVpcmU7XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZShyZXF1aXJlLCBtb2R1bGVJZCkge1xuXHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblx0aWYgKCFtZSkgcmV0dXJuIHJlcXVpcmU7XG5cdHZhciBmbiA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcblx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRzID0gaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzO1xuXHRcdFx0XHRpZiAocGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRwYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG5cdFx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcblx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG5cdFx0XHRcdFx0cmVxdWVzdCArXG5cdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcblx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0KTtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXF1aXJlKHJlcXVlc3QpO1xuXHR9O1xuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVxdWlyZVtuYW1lXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXF1aXJlW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0Zm9yICh2YXIgbmFtZSBpbiByZXF1aXJlKSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpO1xuXHRcdH1cblx0fVxuXHRmbi5lID0gZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQpKTtcblx0fTtcblx0cmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7XG5cdHZhciBfbWFpbiA9IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQ7XG5cdHZhciBob3QgPSB7XG5cdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuXHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG5cdFx0X2FjY2VwdGVkRXJyb3JIYW5kbGVyczoge30sXG5cdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcblx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcblx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcblx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblx0XHRfbWFpbjogX21haW4sXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IF9tYWluID8gdW5kZWZpbmVkIDogbW9kdWxlSWQ7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcblx0XHR9LFxuXG5cdFx0Ly8gTW9kdWxlIEFQSVxuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrLCBlcnJvckhhbmRsZXIpIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwW2ldXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcF0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdHZhciByZXN1bHRzID0gW107XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG5cdFx0cmVzdWx0c1tpXSA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xufVxuXG5mdW5jdGlvbiB1bmJsb2NrKCkge1xuXHRpZiAoLS1ibG9ja2luZ1Byb21pc2VzID09PSAwKSB7XG5cdFx0c2V0U3RhdHVzKFwicmVhZHlcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkge1xuXHRcdFx0XHR2YXIgbGlzdCA9IGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nO1xuXHRcdFx0XHRibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRsaXN0W2ldKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5mdW5jdGlvbiB0cmFja0Jsb2NraW5nUHJvbWlzZShwcm9taXNlKSB7XG5cdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblx0XHQvKiBmYWxsdGhyb3VnaCAqL1xuXHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzKys7XG5cdFx0XHRwcm9taXNlLnRoZW4odW5ibG9jaywgdW5ibG9jayk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pIHtcblx0aWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHJldHVybiBmbigpO1xuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRibG9ja2luZ1Byb21pc2VzV2FpdGluZy5wdXNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlc29sdmUoZm4oKSk7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcImlkbGVcIikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuXHR9XG5cdHJldHVybiBzZXRTdGF0dXMoXCJjaGVja1wiKVxuXHRcdC50aGVuKF9fd2VicGFja19yZXF1aXJlX18uaG1yTSlcblx0XHQudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7XG5cdFx0XHRpZiAoIXVwZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gc2V0U3RhdHVzKGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkgPyBcInJlYWR5XCIgOiBcImlkbGVcIikudGhlbihcblx0XHRcdFx0XHRmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJwcmVwYXJlXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgdXBkYXRlZE1vZHVsZXMgPSBbXTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRrZXlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yQ1trZXldKFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUuYyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5tLFxuXHRcdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZWRNb2R1bGVzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0W10pXG5cdFx0XHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXMgKHN0YXRlOiBcIiArXG5cdFx0XHRcdFx0Y3VycmVudFN0YXR1cyArXG5cdFx0XHRcdFx0XCIpXCJcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQXBwbHkob3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRhcHBseUludmFsaWRhdGVkTW9kdWxlcygpO1xuXG5cdHZhciByZXN1bHRzID0gY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdFx0cmV0dXJuIGhhbmRsZXIob3B0aW9ucyk7XG5cdH0pO1xuXHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IHVuZGVmaW5lZDtcblxuXHR2YXIgZXJyb3JzID0gcmVzdWx0c1xuXHRcdC5tYXAoZnVuY3Rpb24gKHIpIHtcblx0XHRcdHJldHVybiByLmVycm9yO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcblx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiYWJvcnRcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcnNbMF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcblx0dmFyIGRpc3Bvc2VQcm9taXNlID0gc2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcblxuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuZGlzcG9zZSkgcmVzdWx0LmRpc3Bvc2UoKTtcblx0fSk7XG5cblx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuXHR2YXIgYXBwbHlQcm9taXNlID0gc2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cblx0dmFyIGVycm9yO1xuXHR2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG5cdH07XG5cblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuYXBwbHkpIHtcblx0XHRcdHZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTtcblx0XHRcdGlmIChtb2R1bGVzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwoW2Rpc3Bvc2VQcm9taXNlLCBhcHBseVByb21pc2VdKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcImZhaWxcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucykudGhlbihmdW5jdGlvbiAobGlzdCkge1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gbGlzdDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJpZGxlXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkge1xuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0aWYgKCFjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycykgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0iLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICFzY3JpcHRVcmwpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCB8fCB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkge1xuXHRjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0ID0gdXBkYXRlZE1vZHVsZXNMaXN0O1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7XG5cdFx0Ly8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmdcblx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5odShjaHVua0lkKTtcblx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZWFqc1wiXSA9IChjaHVua0lkLCBtb3JlTW9kdWxlcywgcnVudGltZSkgPT4ge1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0aWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgY3VycmVudFVwZGF0ZVJ1bnRpbWUucHVzaChydW50aW1lKTtcblx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKCk7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHR9XG59O1xuXG52YXIgY3VycmVudFVwZGF0ZUNodW5rcztcbnZhciBjdXJyZW50VXBkYXRlO1xudmFyIGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lO1xuZnVuY3Rpb24gYXBwbHlIYW5kbGVyKG9wdGlvbnMpIHtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikgZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtcjtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHVuZGVmaW5lZDtcblx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKHVwZGF0ZU1vZHVsZUlkKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG5cdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cblx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhaW46IFtpZF0sXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuXHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuXHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFtb2R1bGUgfHxcblx0XHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCAmJiAhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkKVxuXHRcdFx0KVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdO1xuXHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG5cdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcblx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcblx0XHRcdFx0cXVldWUucHVzaCh7XG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRpZDogcGFyZW50SWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcblx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcblx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuXHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gYltpXTtcblx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcblx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuXHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG5cdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUobW9kdWxlKSB7XG5cdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyBtb2R1bGUuaWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcblx0XHQpO1xuXHR9O1xuXG5cdGZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdFx0dmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTtcblx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRpZiAobmV3TW9kdWxlRmFjdG9yeSkge1xuXHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMobW9kdWxlSWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG5cdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcblx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcblx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuXHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuXHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGVycm9yOiBhYm9ydEVycm9yXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9BcHBseSkge1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IG5ld01vZHVsZUZhY3Rvcnk7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG5cdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcblx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjdXJyZW50VXBkYXRlID0gdW5kZWZpbmVkO1xuXG5cdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cblx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuXHRmb3IgKHZhciBqID0gMDsgaiA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGorKykge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2pdO1xuXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0aWYgKFxuXHRcdFx0bW9kdWxlICYmXG5cdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkIHx8IG1vZHVsZS5ob3QuX21haW4pICYmXG5cdFx0XHQvLyByZW1vdmVkIHNlbGYtYWNjZXB0ZWQgbW9kdWxlcyBzaG91bGQgbm90IGJlIHJlcXVpcmVkXG5cdFx0XHRhcHBsaWVkVXBkYXRlW291dGRhdGVkTW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmUgJiZcblx0XHRcdC8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlXG5cdFx0XHQhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkXG5cdFx0KSB7XG5cdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG5cdFx0XHRcdG1vZHVsZTogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0cmVxdWlyZTogbW9kdWxlLmhvdC5fcmVxdWlyZVNlbGYsXG5cdFx0XHRcdGVycm9ySGFuZGxlcjogbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG5cblx0cmV0dXJuIHtcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHR9KTtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gdW5kZWZpbmVkO1xuXG5cdFx0XHR2YXIgaWR4O1xuXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG5cdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcblx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuXHRcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0ZGlzcG9zZUhhbmRsZXJzW2pdLmNhbGwobnVsbCwgZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJEW21vZHVsZUlkXSA9IGRhdGE7XG5cblx0XHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcblx0XHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcblx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcblx0XHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuXHRcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cblx0XHRcdHZhciBkZXBlbmRlbmN5O1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikge1xuXHRcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG5cdFx0XHRmb3IgKHZhciB1cGRhdGVNb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oYXBwbGllZFVwZGF0ZSwgdXBkYXRlTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW3VwZGF0ZU1vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJ1biBuZXcgcnVudGltZSBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRVcGRhdGVSdW50aW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lW2ldKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdHZhciBhY2NlcHRDYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0aWYgKGFjY2VwdENhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGFjY2VwdENhbGxiYWNrKTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzLnB1c2goZXJyb3JIYW5kbGVyKTtcblx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBjYWxsYmFja3MubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3Nba10uY2FsbChudWxsLCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgZXJyb3JIYW5kbGVyc1trXSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzW2tdKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIG8gPSAwOyBvIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgbysrKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW29dO1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpdGVtLnJlcXVpcmUobW9kdWxlSWQpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGU6IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9XG5cdH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHtcblx0aWYgKCFjdXJyZW50VXBkYXRlKSB7XG5cdFx0Y3VycmVudFVwZGF0ZSA9IHt9O1xuXHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTtcblx0XHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0fVxuXHRpZiAoIV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF07XG5cdH1cbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoXG5cdGNodW5rSWRzLFxuXHRyZW1vdmVkQ2h1bmtzLFxuXHRyZW1vdmVkTW9kdWxlcyxcblx0cHJvbWlzZXMsXG5cdGFwcGx5SGFuZGxlcnMsXG5cdHVwZGF0ZWRNb2R1bGVzTGlzdFxuKSB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0ge307XG5cdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gcmVtb3ZlZENodW5rcztcblx0Y3VycmVudFVwZGF0ZSA9IHJlbW92ZWRNb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcblx0XHRvYmpba2V5XSA9IGZhbHNlO1xuXHRcdHJldHVybiBvYmo7XG5cdH0sIHt9KTtcblx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0Y2h1bmtJZHMuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdGlmIChcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdCkge1xuXHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IGZhbHNlO1xuXHRcdH1cblx0fSk7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXIgPSBmdW5jdGlvbiAoY2h1bmtJZCwgcHJvbWlzZXMpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rcyAmJlxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0IWN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF1cblx0XHRcdCkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSk7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yTSA9ICgpID0+IHtcblx0aWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0OiBuZWVkIGZldGNoIEFQSVwiKTtcblx0cmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuXHRcdGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSByZXR1cm47IC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcblx0XHRpZighcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHR9KTtcbn07XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKTtcbiJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsImZvcm0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJmb3JtUG9wdXAiLCJvdXRwdXQiLCJwb3B1cCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiYXJyIiwicHVzaCIsInRhcmdldCIsImVudGVyIiwidmFsdWUiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsImRhdGEiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImNvb3JkcyIsImZvckVhY2giLCJlbGVtIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJhZGQiLCJldmVudCIsInN1Ym1pdCIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJPYmplY3QiLCJjcmVhdGUiLCJub0RvY3VtZW50IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJub29wIiwidXBkYXRlQ3NzIiwiZWwiLCJ1cmwiLCJocmVmIiwic3BsaXQiLCJpc1VybFJlcXVlc3QiLCJpc0xvYWRlZCIsImluZGV4T2YiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjb25jYXQiLCJEYXRlIiwibm93IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsInJlbG9hZEFsbCIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImNhbGwiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZUlkIiwib3B0aW9ucyIsImNvbnNvbGUiLCJsb2ciLCJmbiIsInRpbWVvdXQiLCJnZXRTY3JpcHRTcmMiLCJzcmMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImxlbmd0aCIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwIiwibWFwUnVsZSIsInJlZyIsIlJlZ0V4cCIsInJlcGxhY2UiLCJnZXRDdXJyZW50U2NyaXB0VXJsIiwicmVsb2FkZWQiLCJsb2FkZWQiLCJyZXQiLCJzdHJpcFdXVyIsInNvbWUiLCJnZXRSZWxvYWRVcmwiLCJyZWxvYWRTdHlsZSIsImxvY2FscyIsImpvaW4iLCJzZWxmIiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJ1cmxTdHJpbmciLCJ0cmltIiwicHJvdG9jb2wiLCJjb21wb25lbnRzIiwiaG9zdCIsInRvTG93ZXJDYXNlIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpdGVtIiwicG9wIiwiY3NzUmVsb2FkIiwiaWQiLCJob3QiLCJkaXNwb3NlIiwiYWNjZXB0IiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImNhY2hlZE1vZHVsZSIsImVycm9yIiwiZXhlY09wdGlvbnMiLCJmYWN0b3J5IiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInJlcXVpcmUiLCJpIiwiaGFuZGxlciIsIm0iLCJjIiwiaHUiLCJjaHVua0lkIiwiaCIsIm1pbmlDc3NGIiwiaG1yRiIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJvIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwibCIsImRvbmUiLCJrZXkiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwicyIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsIm9uZXJyb3IiLCJvbmxvYWQiLCJkb25lRm5zIiwiYmluZCIsInR5cGUiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJibG9ja2luZ1Byb21pc2VzIiwiYmxvY2tpbmdQcm9taXNlc1dhaXRpbmciLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsInVuYmxvY2siLCJ0aGVuIiwibGlzdCIsImhvdENoZWNrIiwiYXBwbHlPblVwZGF0ZSIsIkVycm9yIiwiaG1yTSIsInVwZGF0ZSIsInVwZGF0ZWRNb2R1bGVzIiwia2V5cyIsImhtckMiLCJwcm9taXNlcyIsInIiLCJpbnRlcm5hbEFwcGx5IiwicmVzb2x2ZSIsImFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzIiwiaG90QXBwbHkiLCJlcnJvcnMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiZGlzcG9zZVByb21pc2UiLCJyZXN1bHQiLCJhcHBseVByb21pc2UiLCJyZXBvcnRFcnJvciIsImVyciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJobXJJIiwiaG1yRCIsIm1lIiwiX21haW4iLCJyZXF1ZXN0IiwiYWN0aXZlIiwicGFyZW50cyIsImNoaWxkcmVuIiwid2FybiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2FjY2VwdGVkRXJyb3JIYW5kbGVycyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfcmVxdWlyZVNlbGYiLCJzbGljZSIsImRlcCIsImNhbGxiYWNrIiwiZXJyb3JIYW5kbGVyIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJpbnZhbGlkYXRlIiwiY2hlY2siLCJzdGF0dXMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsInAiLCJmdWxsaHJlZiIsInJlamVjdCIsImxpbmtUYWciLCJyZWwiLCJlcnJvclR5cGUiLCJyZWFsSHJlZiIsImNvZGUiLCJleGlzdGluZ0xpbmtUYWdzIiwiZGF0YUhyZWYiLCJ0YWciLCJleGlzdGluZ1N0eWxlVGFncyIsIm9sZFRhZyIsIm1pbmlDc3MiLCJjaHVua0lkcyIsInJlbW92ZWRDaHVua3MiLCJyZW1vdmVkTW9kdWxlcyIsImFwcGx5SGFuZGxlcnMiLCJ1cGRhdGVkTW9kdWxlc0xpc3QiLCJhcyIsImN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCJobXJTX2pzb25wIiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsImYiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImoiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiayIsImRlcGVuZGVuY3lJZCIsImVycjIiLCJvbkVycm9yZWQiLCJvcmlnaW5hbEVycm9yIiwiaWdub3JlRXJyb3JlZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImpzb25wIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9